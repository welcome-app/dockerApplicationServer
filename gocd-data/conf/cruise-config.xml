<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="78">
  <server artifactsdir="artifacts" agentAutoRegisterKey="388b633a88de126531afa41eff9aa69e" commandRepositoryLocation="default" serverId="3c98e67f-7050-46ef-b051-fd8e63aef897">
    <security>
      <passwordFile path="/etc/go/htaccess" />
      <admins>
        <user>admin</user>
      </admins>
    </security>
  </server>
  <pipelines group="WelcomeApi">
    <pipeline name="WelcomeApiBAT" labeltemplate="1.0.${COUNT}" isLocked="false">
      <params>
        <param name="SOURCE_DIR">.</param>
      </params>
      <trackingtool link="https://github.com/dmarell/welcome-server/issues/${ID}" regex="##(\d+)" />
      <environmentvariables>
        <variable name="PIPELINE_ENV">
          <value>AutoSmall</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git@github.com:cag-group/welcome-backend.git" />
      </materials>
      <stage name="Build" cleanWorkingDir="true">
        <jobs>
          <job name="Build2DockerImage">
            <tasks>
              <exec command="mvn" workingdir="#{SOURCE_DIR}">
                <arg>versions:set</arg>
                <arg>-DnewVersion=${env.GO_PIPELINE_LABEL}</arg>
                <arg>-B</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>mvn clean package -Dtutumuser=`grep user ~/.docker-cloud | awk -F ' = ' '{print $2}'` -B</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}/welcome-api">
                <arg>-c</arg>
                <arg>docker build --tag=welcome-api:$GO_PIPELINE_LABEL -f go/Dockerfile .</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}/welcome-wally">
                <arg>-c</arg>
                <arg>docker build --tag=welcome-wally:$GO_PIPELINE_LABEL -f Dockerfile .</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>ls</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="welcome-api/target/classes/BuildInfo.properties" dest="downstream" />
              <artifact src="welcome-api/scripts" dest="downstream" />
              <artifact src="welcome-api/tests" dest="downstream" />
              <artifact src="welcome-api/go" dest="downstream" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="AutoSmallDeployAndTest" fetchMaterials="false">
        <environmentvariables>
          <variable name="PIPELINE_ENV">
            <value>autosmall</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="DeployAndTests">
            <tasks>
              <fetchartifact pipeline="WelcomeApiBAT" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="echo" workingdir="downstream/scripts">
                <arg>deployandsmoke.sh</arg>
                <arg>2</arg>
                <runif status="passed" />
              </exec>
              <exec command="echo" workingdir="downstream/scripts">
                <arg>runtest.sh</arg>
                <arg>2</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="Done">
        <jobs>
          <job name="Publish">
            <tasks>
              <fetchartifact pipeline="WelcomeApiBAT" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream">
                <arg>/opt/pipelineinabox/scripts/publish_docker.sh</arg>
                <arg>welcome-api</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="downstream">
                <arg>/opt/pipelineinabox/scripts/publish_docker.sh</arg>
                <arg>welcome-wally</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="WelcomeApiAutoLarge" labeltemplate="${WelcomeApiBAT}-al${COUNT}" isLocked="false">
      <materials>
        <pipeline pipelineName="WelcomeApiBAT" stageName="Done" />
      </materials>
      <stage name="AutoLargeDeployAndTest" fetchMaterials="false">
        <environmentvariables>
          <variable name="PIPELINE_ENV">
            <value>autolarge</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="DeployAndTests">
            <tasks>
              <fetchartifact pipeline="WelcomeApiBAT" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream/">
                <arg>/opt/pipelineinabox/scripts/deploy_docker-cloud.sh</arg>
                <arg>go/tutum/tutum.autolarge.yml</arg>
                <arg>welcome-api</arg>
                <arg>autolarge</arg>
                <runif status="passed" />
              </exec>
              <exec command="echo" workingdir="downstream/scripts">
                <arg>remove echo and change to bash when scripts is fixed</arg>
                <arg>runtest.sh</arg>
                <arg>tutum</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="WelcomeApiUAT" labeltemplate="${WelcomeApiBAT}-uat${COUNT}" isLocked="false">
      <materials>
        <pipeline pipelineName="WelcomeApiBAT" stageName="Done" />
      </materials>
      <stage name="NotifyTesters">
        <jobs>
          <job name="sendMail">
            <tasks>
              <exec command="/opt/pipelineinabox/scripts/notify_slack.sh">
                <arg>Api</arg>
                <arg>UAT</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="UATDeploy" fetchMaterials="false">
        <approval type="manual" />
        <environmentvariables>
          <variable name="PIPELINE_ENV">
            <value>uat</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="DeployAndSmokeTests">
            <tasks>
              <fetchartifact pipeline="WelcomeApiBAT" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream/">
                <arg>/opt/pipelineinabox/scripts/deploy_docker-cloud.sh</arg>
                <arg>go/tutum/tutum.uat.yml</arg>
                <arg>welcome-api</arg>
                <arg>uat</arg>
                <runif status="passed" />
              </exec>
              <exec command="echo" workingdir="downstream/scripts">
                <arg>bash</arg>
                <arg>runtest.sh</arg>
                <arg>tutum</arg>
                <arg>Smoketestsnotimplemted yet</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="TestsOk">
        <approval type="manual" />
        <jobs>
          <job name="LoggTestReport">
            <tasks>
              <exec command="echo">
                <arg>Not implemented yet!</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="WelcomeApiProd" labeltemplate="${WelcomeApiAutoLarge}-pr${COUNT}" isLocked="false">
      <materials>
        <pipeline pipelineName="WelcomeApiAutoLarge" stageName="AutoLargeDeployAndTest" materialName="WelcomeApiAutoLarge" />
      </materials>
      <stage name="CreateReportsForDecision">
        <jobs>
          <job name="createreports">
            <tasks>
              <exec command="/opt/pipelineinabox/scripts/notify_slack.sh">
                <arg>Api</arg>
                <arg>Prod</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="ProdDeploy" fetchMaterials="false">
        <approval type="manual" />
        <environmentvariables>
          <variable name="PIPELINE_ENV">
            <value>prod</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="DeployAndSmokeTests">
            <tasks>
              <fetchartifact pipeline="WelcomeApiBAT/WelcomeApiAutoLarge" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream/">
                <arg>/opt/pipelineinabox/scripts/deploy_docker-cloud.sh</arg>
                <arg>go/tutum/tutum.prod.yml</arg>
                <arg>welcome-api</arg>
                <arg>prod</arg>
                <runif status="passed" />
              </exec>
              <exec command="echo" workingdir="downstream/scripts">
                <arg>bash</arg>
                <arg>runtest.sh</arg>
                <arg>tutum</arg>
                <arg>Notimplementedyet, remove this line and move bash to command</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="WWW">
    <pipeline name="WelcomeWWWBAT" labeltemplate="1.0.${COUNT}" isLocked="false">
      <params>
        <param name="SOURCE_DIR">src</param>
      </params>
      <trackingtool link="https://github.com/dmarell/welcome-server/issues/${ID}" regex="##(\d+)" />
      <environmentvariables>
        <variable name="PIPELINE_ENV">
          <value>AutoSmall</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git@github.com:welcome-app/welcome-www.git" dest="src" />
      </materials>
      <stage name="Build" cleanWorkingDir="true">
        <jobs>
          <job name="Build2DockerImage">
            <tasks>
              <exec command="mvn" workingdir="#{SOURCE_DIR}">
                <arg>versions:set</arg>
                <arg>-DnewVersion=${env.GO_PIPELINE_LABEL}</arg>
                <arg>-B</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>mvn clean package -Dtutumuser=`grep user ~/.docker-cloud | awk -F ' = ' '{print $2}'` -B</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>docker build --tag=welcome-www:$GO_PIPELINE_LABEL .</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="#{SOURCE_DIR}/scripts" dest="downstream" />
              <artifact src="#{SOURCE_DIR}/tests" dest="downstream" />
              <artifact src="#{SOURCE_DIR}/go" dest="downstream" />
              <artifact src="#{SOURCE_DIR}/BuildInfo.properties" dest="downstream" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="AutoSmallDeployAndTest" fetchMaterials="false">
        <environmentvariables>
          <variable name="PIPELINE_ENV">
            <value>autosmall</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="DeployAndTests">
            <tasks>
              <fetchartifact pipeline="WelcomeWWWBAT" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream/scripts">
                <arg>deployandsmoke.sh</arg>
                <arg>2</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="downstream/scripts">
                <arg>runtest.sh</arg>
                <arg>2</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="Done">
        <jobs>
          <job name="Publish">
            <tasks>
              <fetchartifact pipeline="WelcomeWWWBAT" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream">
                <arg>/opt/pipelineinabox/scripts/publish_docker.sh</arg>
                <arg>welcome-www</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="WelcomeWWWAutoLarge" labeltemplate="${WelcomeWWWBAT}-al${COUNT}" isLocked="false">
      <materials>
        <pipeline pipelineName="WelcomeWWWBAT" stageName="Done" />
      </materials>
      <stage name="AutoLargeDeployAndTest" fetchMaterials="false">
        <environmentvariables>
          <variable name="PIPELINE_ENV">
            <value>autolarge</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="DeployAndTests">
            <tasks>
              <fetchartifact pipeline="WelcomeWWWBAT" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream/">
                <arg>/opt/pipelineinabox/scripts/deploy_docker-cloud.sh</arg>
                <arg>go/tutum/tutum.autolarge.yml</arg>
                <arg>welcome-www</arg>
                <arg>autolarge</arg>
                <runif status="passed" />
              </exec>
              <exec command="echo" workingdir="downstream/scripts">
                <arg>remove echo and change to bash when scripts is fixed</arg>
                <arg>runtest.sh</arg>
                <arg>tutum</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="WelcomeWWWUAT" labeltemplate="${upstream}-uat${COUNT}" isLocked="false">
      <materials>
        <pipeline pipelineName="WelcomeWWWBAT" stageName="Done" materialName="upstream" />
      </materials>
      <stage name="NotifyTesters">
        <jobs>
          <job name="sendMail">
            <tasks>
              <exec command="/opt/pipelineinabox/scripts/notify_slack.sh">
                <arg>www</arg>
                <arg>UAT</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="UATDeploy" fetchMaterials="false">
        <approval type="manual" />
        <environmentvariables>
          <variable name="PIPELINE_ENV">
            <value>uat</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="DeployAndSmokeTests">
            <tasks>
              <fetchartifact pipeline="WelcomeWWWBAT" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream/">
                <arg>/opt/pipelineinabox/scripts/deploy_docker-cloud.sh</arg>
                <arg>go/tutum/tutum.uat.yml</arg>
                <arg>welcome-www</arg>
                <arg>uat</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="downstream/scripts">
                <arg>runtest.sh</arg>
                <arg>tutum</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="TestsOk">
        <approval type="manual" />
        <jobs>
          <job name="LoggTestReport">
            <tasks>
              <exec command="echo">
                <arg>Not implemented yet!</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="WelcomeWWWProd" labeltemplate="${WelcomeWWWAutoLarge}-pr${COUNT}" isLocked="false">
      <materials>
        <pipeline pipelineName="WelcomeWWWAutoLarge" stageName="AutoLargeDeployAndTest" />
      </materials>
      <stage name="CreateReportsForDecision">
        <jobs>
          <job name="createreports">
            <tasks>
              <exec command="/opt/pipelineinabox/scripts/notify_slack.sh">
                <arg>www</arg>
                <arg>prod</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="ProdDeploy" fetchMaterials="false">
        <approval type="manual" />
        <environmentvariables>
          <variable name="PIPELINE_ENV">
            <value>prod</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="DeployAndSmokeTests">
            <tasks>
              <fetchartifact pipeline="WelcomeWWWBAT/WelcomeWWWAutoLarge" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream/">
                <arg>/opt/pipelineinabox/scripts/deploy_docker-cloud.sh</arg>
                <arg>go/tutum/tutum.prod.yml</arg>
                <arg>welcome-www</arg>
                <arg>prod</arg>
                <runif status="passed" />
              </exec>
              <exec command="echo" workingdir="downstream/scripts">
                <arg>bash</arg>
                <arg>runtest.sh</arg>
                <arg>tutum</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="App">
    <pipeline name="WelcomeAppBAT" labeltemplate="1.0.${COUNT}" isLocked="false">
      <params>
        <param name="SOURCE_DIR">src</param>
      </params>
      <trackingtool link="https://github.com/dmarell/welcome-server/issues/${ID}" regex="##(\d+)" />
      <environmentvariables>
        <variable name="PIPELINE_ENV">
          <value>AutoSmall</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git@github.com:noentiger/welcomeapp.git" dest="src" />
      </materials>
      <stage name="Build" cleanWorkingDir="true">
        <jobs>
          <job name="Build2DockerImage">
            <tasks>
              <exec command="mvn" workingdir="#{SOURCE_DIR}">
                <arg>versions:set</arg>
                <arg>-DnewVersion=${env.GO_PIPELINE_LABEL}</arg>
                <arg>-B</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>mvn clean package -DrunEnvironment=autolarge -Dtutumuser=`grep user ~/.docker-cloud | awk -F ' = ' '{print $2}'` -B</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>mvn clean package -DrunEnvironment=autolarge -Dtutumuser=`grep user ~/.docker-cloud | awk -F ' = ' '{print $2}'` -B</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>docker build --tag=welcome-app-autolarge:${GO_PIPELINE_LABEL} .</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="#{SOURCE_DIR}/scripts" dest="downstream" />
              <artifact src="#{SOURCE_DIR}/tests" dest="downstream" />
              <artifact src="#{SOURCE_DIR}/go" dest="downstream" />
              <artifact src="#{SOURCE_DIR}/go/BuildInfo.properties" dest="downstream" />
            </artifacts>
          </job>
          <job name="Build2DockerImageProd">
            <tasks>
              <exec command="mvn" workingdir="#{SOURCE_DIR}">
                <arg>versions:set</arg>
                <arg>-DnewVersion=${env.GO_PIPELINE_LABEL}</arg>
                <arg>-B</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>mvn clean package -DrunEnvironment=production -Dtutumuser=`grep user ~/.docker-cloud | awk -F ' = ' '{print $2}'` -B</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>mvn clean package -DrunEnvironment=production -Dtutumuser=`grep user ~/.docker-cloud | awk -F ' = ' '{print $2}'` -B</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>docker build --tag=welcome-app-prod:${GO_PIPELINE_LABEL} .</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="#{SOURCE_DIR}/scripts" dest="downstream" />
              <artifact src="#{SOURCE_DIR}/tests" dest="downstream" />
              <artifact src="#{SOURCE_DIR}/go" dest="downstream" />
              <artifact src="#{SOURCE_DIR}/go/BuildInfo.properties" dest="downstream" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="AutoSmallDeployAndTest" fetchMaterials="false">
        <environmentvariables>
          <variable name="PIPELINE_ENV">
            <value>autosmall</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="DeployAndTests">
            <tasks>
              <fetchartifact pipeline="" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream/scripts">
                <arg>deployandsmoke.sh</arg>
                <arg>2</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="downstream/scripts">
                <arg>runtest.sh</arg>
                <arg>2</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="Done">
        <jobs>
          <job name="Publish">
            <tasks>
              <fetchartifact pipeline="" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream">
                <arg>-x</arg>
                <arg>/opt/pipelineinabox/scripts/publish_docker.sh</arg>
                <arg>welcome-app-autolarge</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="downstream">
                <arg>/opt/pipelineinabox/scripts/publish_docker.sh</arg>
                <arg>welcome-app-prod</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="WelcomeAppAutoLarge" labeltemplate="${WelcomeAppBAT}-al${COUNT}" isLocked="false">
      <materials>
        <pipeline pipelineName="WelcomeAppBAT" stageName="Done" />
      </materials>
      <stage name="AutoLargeDeployAndTest" fetchMaterials="false">
        <environmentvariables>
          <variable name="PIPELINE_ENV">
            <value>autolarge</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="DeployAndTests">
            <tasks>
              <fetchartifact pipeline="WelcomeAppBAT" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream/">
                <arg>/opt/pipelineinabox/scripts/deploy_docker-cloud.sh</arg>
                <arg>go/tutum.autolarge.yml</arg>
                <arg>welcome-app</arg>
                <arg>autolarge</arg>
                <runif status="passed" />
              </exec>
              <exec command="echo" workingdir="downstream/scripts">
                <arg>remove echo and change to bash when scripts is fixed</arg>
                <arg>runtest.sh</arg>
                <arg>tutum</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="WelcomeAppUAT" labeltemplate="${upstream}-uat${COUNT}" isLocked="false">
      <materials>
        <pipeline pipelineName="WelcomeAppBAT" stageName="Done" materialName="upstream" />
      </materials>
      <stage name="NotifyTesters">
        <jobs>
          <job name="sendMail">
            <tasks>
              <exec command="/opt/pipelineinabox/scripts/notify_slack.sh">
                <arg>app</arg>
                <arg>UAT</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="UATDeploy" fetchMaterials="false">
        <approval type="manual" />
        <environmentvariables>
          <variable name="PIPELINE_ENV">
            <value>uat</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="DeployAndSmokeTests">
            <tasks>
              <fetchartifact pipeline="WelcomeAppBAT" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream/">
                <arg>-x</arg>
                <arg>/opt/pipelineinabox/scripts/deploy_docker-cloud.sh</arg>
                <arg>go/tutum.uat.yml</arg>
                <arg>welcome-app</arg>
                <arg>uat</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="downstream/scripts">
                <arg>runtest.sh</arg>
                <arg>tutum</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="TestsOk">
        <approval type="manual" />
        <jobs>
          <job name="LoggTestReport">
            <tasks>
              <exec command="echo">
                <arg>Not implemented yet!</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="WelcomeAppProd" labeltemplate="${WelcomeAppAutoLarge}-pr${COUNT}" isLocked="false">
      <materials>
        <pipeline pipelineName="WelcomeAppAutoLarge" stageName="AutoLargeDeployAndTest" />
      </materials>
      <stage name="CreateReportsForDecision">
        <jobs>
          <job name="createreports">
            <tasks>
              <exec command="/opt/pipelineinabox/scripts/notify_slack.sh">
                <arg>app</arg>
                <arg>prod</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="ProdDeploy" fetchMaterials="false">
        <approval type="manual" />
        <environmentvariables>
          <variable name="PIPELINE_ENV">
            <value>prod</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="DeployAndSmokeTests">
            <tasks>
              <fetchartifact pipeline="WelcomeAppBAT/WelcomeAppAutoLarge" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream/">
                <arg>/opt/pipelineinabox/scripts/deploy_docker-cloud.sh</arg>
                <arg>go/tutum.prod.yml</arg>
                <arg>welcome-app</arg>
                <arg>prod</arg>
                <runif status="passed" />
              </exec>
              <exec command="echo" workingdir="downstream/scripts">
                <arg>bash</arg>
                <arg>runtest.sh</arg>
                <arg>tutum</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="WelcomeBackoffice">
    <pipeline name="WelcomeBackofficeBAT" labeltemplate="1.0.${COUNT}" isLocked="false">
      <params>
        <param name="SOURCE_DIR">src</param>
      </params>
      <trackingtool link="https://github.com/dmarell/welcome-server/issues/${ID}" regex="##(\d+)" />
      <environmentvariables>
        <variable name="PIPELINE_ENV">
          <value>AutoSmall</value>
        </variable>
      </environmentvariables>
      <materials>
        <git url="git@github.com:welcomers/welcome-backoffice.git" dest="src" />
      </materials>
      <stage name="Build" cleanWorkingDir="true">
        <jobs>
          <job name="Build2DockerImage">
            <tasks>
              <exec command="mvn" workingdir="#{SOURCE_DIR}">
                <arg>versions:set</arg>
                <arg>-DnewVersion=${env.GO_PIPELINE_LABEL}</arg>
                <arg>-B</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>mvn clean package -Dtutumuser=`grep user ~/.docker-cloud | awk -F ' = ' '{print $2}'` -B</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>docker build --tag=welcome-backoffice:$GO_PIPELINE_LABEL .</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <artifacts>
              <artifact src="#{SOURCE_DIR}/scripts" dest="downstream" />
              <artifact src="#{SOURCE_DIR}/tests" dest="downstream" />
              <artifact src="#{SOURCE_DIR}/go" dest="downstream" />
              <artifact src="#{SOURCE_DIR}/BuildInfo.properties" dest="downstream" />
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="AutoSmallDeployAndTest" fetchMaterials="false">
        <environmentvariables>
          <variable name="PIPELINE_ENV">
            <value>autosmall</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="DeployAndTests">
            <tasks>
              <fetchartifact pipeline="" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream/scripts">
                <arg>deployandsmoke.sh</arg>
                <arg>2</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="downstream/scripts">
                <arg>runtest.sh</arg>
                <arg>2</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="Done">
        <jobs>
          <job name="Publish">
            <tasks>
              <fetchartifact pipeline="" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream">
                <arg>/opt/pipelineinabox/scripts/publish_docker.sh</arg>
                <arg>welcome-backoffice</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="WelcomeBackofficeAutoLarge" labeltemplate="${WelcomeBackofficeBAT}-al${COUNT}" isLocked="false">
      <materials>
        <pipeline pipelineName="WelcomeBackofficeBAT" stageName="Done" materialName="WelcomeBackofficeBAT" />
      </materials>
      <stage name="AutoLargeDeployAndTest" fetchMaterials="false">
        <environmentvariables>
          <variable name="PIPELINE_ENV">
            <value>autolarge</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="DeployAndTests">
            <tasks>
              <fetchartifact pipeline="WelcomeBackofficeBAT" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream/">
                <arg>/opt/pipelineinabox/scripts/deploy_docker-cloud.sh</arg>
                <arg>go/tutum/tutum.autolarge.yml</arg>
                <arg>welcome-backoffice</arg>
                <arg>autolarge</arg>
                <runif status="passed" />
              </exec>
              <exec command="echo" workingdir="downstream/scripts">
                <arg>remove echo and change to bash when scripts is fixed</arg>
                <arg>runtest.sh</arg>
                <arg>tutum</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="WelcomeBackofficeUAT" labeltemplate="${upstream2}-uat${COUNT}" isLocked="false">
      <materials>
        <pipeline pipelineName="WelcomeBackofficeBAT" stageName="Done" materialName="upstream2" />
      </materials>
      <stage name="NotifyTesters">
        <jobs>
          <job name="sendMail">
            <tasks>
              <exec command="/opt/pipelineinabox/scripts/notify_slack.sh">
                <arg>backoffice</arg>
                <arg>UAT</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="UATDeploy" fetchMaterials="false">
        <approval type="manual" />
        <environmentvariables>
          <variable name="PIPELINE_ENV">
            <value>uat</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="DeployAndSmokeTests">
            <tasks>
              <fetchartifact pipeline="WelcomeBackofficeBAT" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream/">
                <arg>/opt/pipelineinabox/scripts/deploy_docker-cloud.sh</arg>
                <arg>go/tutum/tutum.uat.yml</arg>
                <arg>welcome-backoffice</arg>
                <arg>uat</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="downstream/scripts">
                <arg>runtest.sh</arg>
                <arg>tutum</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="TestsOk">
        <approval type="manual" />
        <jobs>
          <job name="LoggTestReport">
            <tasks>
              <exec command="echo">
                <arg>Not implemented yet!</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="WelcomeBackofficeProd" labeltemplate="${WelcomeBackofficeAutolarge}-pr${COUNT}" isLocked="false">
      <materials>
        <pipeline pipelineName="WelcomeWWWAutoLarge" stageName="AutoLargeDeployAndTest" />
        <pipeline pipelineName="WelcomeBackofficeAutoLarge" stageName="AutoLargeDeployAndTest" materialName="WelcomeBackofficeAutolarge" />
      </materials>
      <stage name="CreateReportsForDecision">
        <jobs>
          <job name="createreports">
            <tasks>
              <exec command="/opt/pipelineinabox/scripts/notify_slack.sh">
                <arg>backoffice</arg>
                <arg>prod</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="ProdDeploy" fetchMaterials="false">
        <approval type="manual" />
        <environmentvariables>
          <variable name="PIPELINE_ENV">
            <value>prod</value>
          </variable>
        </environmentvariables>
        <jobs>
          <job name="DeployAndSmokeTests">
            <tasks>
              <fetchartifact pipeline="WelcomeBackofficeBAT/WelcomeBackofficeAutoLarge" stage="Build" job="Build2DockerImage" srcdir="downstream">
                <runif status="passed" />
              </fetchartifact>
              <exec command="bash" workingdir="downstream/">
                <arg>/opt/pipelineinabox/scripts/deploy_docker-cloud.sh</arg>
                <arg>go/tutum/tutum.prod.yml</arg>
                <arg>welcome-backoffice</arg>
                <arg>prod</arg>
                <runif status="passed" />
              </exec>
              <exec command="echo" workingdir="downstream/scripts">
                <arg>bash</arg>
                <arg>runtest.sh</arg>
                <arg>tutum</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <agents>
    <agent hostname="goagent-1" ipaddress="10.7.0.5" uuid="d5cbb788-53e5-4e5c-b7c2-0f6ee4ac1dea">
      <resources>
        <resource>docker_created</resource>
        <resource>application</resource>
      </resources>
    </agent>
    <agent hostname="goagent-1" ipaddress="10.7.0.5" uuid="64c3cc0f-c333-41e3-ab61-4b41b27aa601">
      <resources>
        <resource>docker_created</resource>
        <resource>application</resource>
      </resources>
    </agent>
    <agent hostname="goagent-1" ipaddress="10.7.0.5" uuid="47311504-413e-4254-bc50-8c341b65742a">
      <resources>
        <resource>docker_created</resource>
        <resource>application</resource>
      </resources>
    </agent>
    <agent hostname="goagent-1" ipaddress="10.7.0.5" uuid="b8455b0b-cdf3-4a94-89de-70ff64f1e8cd">
      <resources>
        <resource>docker_created</resource>
        <resource>application</resource>
      </resources>
    </agent>
  </agents>
</cruise>
